// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const getMetricEvent = `-- name: GetMetricEvent :one
SELECT event_timestamp, client_id, tenant_id, metric_value, metric_type, metric_name from metric_events_hyper 
where client_id = $1 
limit 1
`

func (q *Queries) GetMetricEvent(ctx context.Context, clientID string) (MetricEventsHyper, error) {
	row := q.db.QueryRow(ctx, getMetricEvent, clientID)
	var i MetricEventsHyper
	err := row.Scan(
		&i.EventTimestamp,
		&i.ClientID,
		&i.TenantID,
		&i.MetricValue,
		&i.MetricType,
		&i.MetricName,
	)
	return i, err
}

const listAllMetricEvent = `-- name: ListAllMetricEvent :many
SELECT event_timestamp, client_id, tenant_id, metric_value, metric_type, metric_name from metric_events_hyper
`

func (q *Queries) ListAllMetricEvent(ctx context.Context) ([]MetricEventsHyper, error) {
	rows, err := q.db.Query(ctx, listAllMetricEvent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MetricEventsHyper
	for rows.Next() {
		var i MetricEventsHyper
		if err := rows.Scan(
			&i.EventTimestamp,
			&i.ClientID,
			&i.TenantID,
			&i.MetricValue,
			&i.MetricType,
			&i.MetricName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMetricEvent = `-- name: SaveMetricEvent :one
INSERT INTO metric_events(event_timestamp, client_id, tenant_id, metric_value, metric_type, metric_name)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
    )
RETURNING event_timestamp, client_id, tenant_id, metric_value, metric_type, metric_name
`

type SaveMetricEventParams struct {
	EventTimestamp time.Time
	ClientID       string
	TenantID       string
	MetricValue    float64
	MetricType     string
	MetricName     string
}

func (q *Queries) SaveMetricEvent(ctx context.Context, arg SaveMetricEventParams) (MetricEvent, error) {
	row := q.db.QueryRow(ctx, saveMetricEvent,
		arg.EventTimestamp,
		arg.ClientID,
		arg.TenantID,
		arg.MetricValue,
		arg.MetricType,
		arg.MetricName,
	)
	var i MetricEvent
	err := row.Scan(
		&i.EventTimestamp,
		&i.ClientID,
		&i.TenantID,
		&i.MetricValue,
		&i.MetricType,
		&i.MetricName,
	)
	return i, err
}
