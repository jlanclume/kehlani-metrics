services:
  # Kafka (Kraft) Broker
  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    networks:
      - kelhani-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=1
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Scripts to initialize Kafka
  init-kafka:
    image: bitnami/kafka:latest
    container_name: init-kafka
    networks:
      - kelhani-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: /bin/bash
    command: init-kafka-topics.sh
    volumes:
      - ./kafka/init-scripts:/usr/local/bin

  # Setup proto registry
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    networks:
      - kelhani-network
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:9092
      - SCHEMA_REGISTRY_LISTENER=http://0.0.0.0:8081
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 3s
      retries: 10
      timeout: 10s

  # Initialize registry
  init-schema-registry:
    container_name: init-schema-registry
    build:
      context: docker/alpine-curl-jq
    networks:
      - kelhani-network
    command: /kafka/init-scripts/init-schema-registry-proto.sh
    volumes:
      - ./proto:/proto
      - ./kafka/init-scripts:/kafka/init-scripts
    depends_on:
      schema-registry:
        condition: service_healthy

  # Compile protobuf defs
  compile-proto:
    container_name: compile-proto
    build:
      context: docker/protoc-gen-go
    networks:
      - kelhani-network
    command: bash /proto/scripts/compile-proto-go.sh
    volumes:
      - ./proto:/proto
      - ./go/proto:/target
    restart: no

  # Kafka connect JDBC connector
  kafka-connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect:latest
    networks:
      - kelhani-network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_CONFIG_STORAGE_TOPIC: "kafka-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "kafka-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "kafka-connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.protobuf.ProtobufConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_REST_ADVERTISED_LISTENER: http
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: "8083"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_PROTOBUF_SCHEMA: "proto.MetricEvent"
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-protobuf-converter:latest
        /etc/confluent/docker/run
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy

  # TimescaleDB (PostgreSQL)
  timescale-db:
    image: timescale/timescaledb:2.18.1-pg17
    container_name: timescale-db
    networks:
      - kelhani-network
    environment:
      POSTGRES_USER: kehlani-user
      POSTGRES_PASSWORD: kehlani-pwd
      POSTGRES_DB: events-db
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "kehlani-user",
          "-d",
          "events-db",
          "-h",
          "localhost",
          "-p",
          "5432",
        ]
      interval: 10s
      retries: 5
      timeout: 5s
    ports:
      - "5432:5432"

  # DB migration
  migrate:
    container_name: migrate
    image: migrate/migrate
    networks:
      - kelhani-network
    depends_on:
      timescale-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://kehlani-user:kehlani-pwd@timescale-db:5432/events-db?sslmode=disable
    command: -path /migrations -database $DATABASE_URL up
    volumes:
      - ./timescaledb/migrations:/migrations
    restart: "no"

  # Go service
  kelhani-go:
    container_name: kelhani-go
    networks:
      - kelhani-network
    build:
      context: ./go
      dockerfile: Dockerfile.dev
      target: dev-runner
    ports:
      - "50051:50051"
    volumes:
      - ./go:/opt/kelhani/api/src
    depends_on:
      - kafka
      - schema-registry
      - timescale-db

networks:
  kelhani-network:
    driver: bridge
