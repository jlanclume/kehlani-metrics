services:
  # Kafka (Kraft) Broker
  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    networks:
      - kehlani-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=1
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: kafka-ui
    networks:
      - kehlani-network
    ports:
      - 8080:8080
    environment:
      - KAFKA_BROKERS=kafka:9092    
    depends_on:
      kafka:
        condition: service_healthy

  # Scripts to initialize Kafka
  init-kafka:
    image: bitnami/kafka:latest
    container_name: init-kafka
    networks:
      - kehlani-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: /bin/bash
    command: init-kafka-topics.sh
    volumes:
      - ./kafka/init-scripts:/usr/local/bin
    restart: no
  
  # Compile protobuf defs
  compile-proto:
    container_name: compile-proto
    build:
      context: docker/protoc-gen-go
    networks:
      - kehlani-network
    command: bash /protobuf/scripts/compile-proto-go.sh
    volumes:
      - ./protobuf:/protobuf
      - ./go/protobuf:/target
    restart: no

  # TimescaleDB (PostgreSQL)
  timescale-db:
    image: timescale/timescaledb:2.18.1-pg17
    container_name: timescale-db
    networks:
      - kehlani-network
    environment:
      POSTGRES_USER: kehlani-user
      POSTGRES_PASSWORD: kehlani-pwd
      POSTGRES_DB: events-db
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "kehlani-user",
          "-d",
          "events-db",
          "-h",
          "localhost",
          "-p",
          "5432",
        ]
      interval: 10s
      retries: 5
      timeout: 5s
    ports:
      - "5432:5432"

  # DB migration
  migrate:
    container_name: migrate
    image: migrate/migrate
    networks:
      - kehlani-network
    depends_on:
      timescale-db:
        condition: service_healthy
    command: -path /migrations -database "postgres://kehlani-user:kehlani-pwd@timescale-db:5432/events-db?sslmode=disable" up
    volumes:
      - ./timescaledb/migrations:/migrations
    restart: "no"

  # API service
  kehlani-api:
    container_name: kehlani-api
    networks:
      - kehlani-network
    build:
      context: ./docker/api
      dockerfile: Dockerfile.dev
      target: dev-runner
    ports:
      - "50051:50051"
    volumes:
      - ./go:/opt/kehlani/api/src
      - ./.env.dist:/opt/kehlani/api/src/.env
    depends_on:
      kafka:
        condition: service_healthy
      timescale-db:
        condition: service_healthy
  
    # API service
  kehlani-worker:
    container_name: kehlani-worker
    networks:
      - kehlani-network
    build:
      context: ./docker/worker
      dockerfile: Dockerfile.dev
      target: dev-runner
    volumes:
      - ./go:/opt/kehlani/worker/src
      - ./.env.dist:/opt/kehlani/worker/src/.env
    depends_on:
      kafka:
        condition: service_healthy
      timescale-db:
        condition: service_healthy

networks:
  kehlani-network:
    driver: bridge
